def datacenter =params.DC
def action =params.Action
def application =params.Application
def apiFromParameter =params.api 
def appServersFromParam = params.server
def paymentedgeapi=''
def core=''
def c3po=''
def cause = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')


pipeline {
    agent any

    stages {
        stage('Parallel execution') {
            parallel {
                stage('Application: payment-edge-api') {
                    when {
                        expression {
                        'payment-edge-api' in application||'All' in application
                        }
                    }
                    steps {
                        script{
                            try{
                                println "Performing "+ action +" on application payment-edge-api"
                                def serverdetails = readJSON file: 'payment-edge-api.json'
								def nceServer = serverdetails.NCE_SERVERS
                                def ncwServer = serverdetails.NCW_SERVERS
								def nceAdminServer = serverdetails.ADMIN_NCE_SERVERS
                                def ncwAdminServer = serverdetails.ADMIN_NCW_SERVERS
								
								def appServersFromParamArray = Arrays.asList((appServersFromParam).split(","))
                                def appName = serverdetails.APP
								def reverseApp = appName.reverse(); // reversing the appname to maintain the start sequence
								def server
								def adminServer
								//def app
                         
                                if(application =='All') {
									if(datacenter =='NCE'){
										server = nceServer
										adminServer = nceAdminServer
										println "nce servers are: " + server
										println "nce adminServer : " + adminServer
										println "appName from bitbucket : " + appName
									}
									else if(datacenter =='NCW'){
										server = ncwServer
										adminServer = ncwAdminServer
										println "ncw servers are: " + server
										println "ncw adminServer : " + adminServer
										println "appName from bitbucket : " + appName
									}
								}
								else 
								{	
									server = appServersFromParamArray
									
									println "server selected from job parameter: " + server
                                }
								if(action =='status' && application =='All' ){
									for(app in appName) {
										appStartStop(app, server,action)
									}
								appStartStop('services-server-admin', adminServer,action)
								appStartStop('services-server-config', server,action)
								kafkaZookeepStartStop('kafka',server,action)
								kafkaZookeepStartStop('zookeeper',server,action)								
								}
								if(action =='stop' && application =='All'){
									for(app in appName) {
										appStartStop(app, server,action)
									}
									appStartStop('services-server-admin', adminServer,action)
									appStartStop('services-server-config', server,action)
									kafkaZookeepStartStop('kafka',server,action)
									kafkaZookeepStartStop('zookeeper',server,action)								
								}

                                else if(action =='start' && application =='All'){
									kafkaZookeepStartStop('zookeeper',server,action)
									sleep 60
									kafkaZookeepStartStop('kafka',server,action)
									sleep 60
									appStartStop('services-server-config', server,action)
									appStartStop('services-server-admin', adminServer,action)
									for(app in reverseApp) {
										appStartStop(app, server,action)
									}
								}
								
								if(apiFromParameter =='payment-edge-api'|| apiFromParameter =='services-server-config' || apiFromParameter=='services-server-gateway'||apiFromParameter=='services-server-eureka' ||apiFromParameter =='services-server-admin'){
								  println 'app selected from input parameter: ' + apiFromParameter
								  appStartStop(apiFromParameter, server,action)						
								}

								else if(apiFromParameter =='kafka' ||apiFromParameter =='zookeeper' ){
								 println 'app selected from input parameter: ' + apiFromParameter
								 //kafkaZookeepStartStop(apiFromParameter,server,action) // TO-DO
								  
								}
							}catch(Exception e) 
                            {
                                println "******** ERROR ********"+e
                                paymentedgeapi ='Failed'
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') 
								{
                                    sh "exit 1"
                                }
                            }
                        }
                    }        
                }
				stage('Application: c3po') {
                    when {
                        expression {
                        'c3po' in application||'All' in application
                        }
                    }
                    steps {
                        script{
                            try{
                                println "Performing "+ action +" on application c3po"
                                def serverdetails = readJSON file: 'c3po.json'
								def nceServer = serverdetails.APP_NCE_SERVERS
                                def ncwServer = serverdetails.APP_NCW_SERVERS
								def kznceServer= serverdetails.KAFKA_ZK_NCE_SERVERS
								def kzncwServer= serverdetails.KAFKA_ZK_NCW_SERVERS
								def nceAdminServer = serverdetails.ADMIN_NCE_SERVERS
                                def ncwAdminServer = serverdetails.ADMIN_NCW_SERVERS
								def nceConfigEurekaServer = serverdetails.CONFIG_EUREKA_NCE_SERVERS
								def ncwConfigEurekaServer = serverdetails.CONFIG_EUREKA_NCW_SERVERS
								
								def appServersFromParamArray = Arrays.asList((appServersFromParam).split(","))
                                def appName = serverdetails.APP
								def reverseApp = appName.reverse();
								def server
								def adminServer
								def kzserver
								def configeurekaserver
                         
                                if(application =='All') {
									if(datacenter =='NCE'){
										server = nceServer
										adminServer = nceAdminServer
										kzserver = kznceServer
										configeurekaserver =nceConfigEurekaServer
										println "nce servers are: " + server
										println "nce adminServer : " + adminServer
										println "nce kafka/zookeeper servers are: " + kznceServer
										println "nce eureka config server : " + nceConfigEurekaServer
									}
									else if(datacenter =='NCW'){
										server = ncwServer
										adminServer = ncwAdminServer
										kzserver =kzncwServer
										configeurekaserver=ncwConfigEurekaServer
										println "ncw servers are: " + server
										println "ncw adminServer : " + adminServer
										println "ncw kafka/zookeeper servers are: " + kzncwServer
										println "ncw eureka config server : " + ncwConfigEurekaServer
									}
								}
								else 
								{
									server = appServersFromParamArray
									println "server selected from job parameter: " + server
									println "api selected from job parameter: " + apiFromParameter
								}
								
				
								if(action =='status' && application =='All'){
									for(app in appName) {
										appStartStop(app, server,action)
									}						
									appStartStop('services-server-eureka', configeurekaserver,action)
									appStartStop('services-server-admin', adminServer,action)
									appStartStop('services-server-config', configeurekaserver,action)
									kafkaZookeepStartStop('kafka',kzserver,action)
									kafkaZookeepStartStop('zookeeper',kzserver,action)								
								}
								if(action =='stop' && application =='All'){
									for(app in appName) {
										appStartStop(app, server,action) //stopping both c3po and gateway in 1 go
									}
									appStartStop('services-server-eureka', configeurekaserver,action)
									appStartStop('services-server-admin', adminServer,action)
									appStartStop('services-server-config', configeurekaserver,action)
									kafkaZookeepStartStop('kafka',kzserver,action)
									kafkaZookeepStartStop('zookeeper',kzserver,action)									
								}

                                else if(action =='start' && application =='All'){
									kafkaZookeepStartStop('zookeeper',kzserver,action)
									sleep 60
									kafkaZookeepStartStop('kafka',kzserver,action)
									sleep 60
									appStartStop('services-server-config', configeurekaserver,action)
									appStartStop('services-server-admin', adminServer,action)
									appStartStop('services-server-eureka', configeurekaserver,action)
									for(app in reverseApp) {
										appStartStop(app, server,action)
									}
								}
								
								if(apiFromParameter =='c3po' || apiFromParameter =='services-server-gateway'){
									println 'app selected from input parameter: ' + apiFromParameter
									appStartStop(apiFromParameter, server,action)
								}
								else if(apiFromParameter =='services-server-admin'){
									println 'app selected from input parameter: ' + apiFromParameter
									appStartStop(apiFromParameter, server,action)
								}
								else if(apiFromParameter =='services-server-config'|| apiFromParameter=='services-server-eureka'){
									println 'app selected from input parameter: ' + apiFromParameter
									appStartStop(apiFromParameter, server,action)
								}
								else if(apiFromParameter =='kafka' ||apiFromParameter =='zookeeper' ){
									println 'app selected from input parameter: ' + apiFromParameter
									ACTION //TO-DO
								}
								
							}catch(Exception e) 
                            {
                                println "******** ERROR ********"+e
                                c3po ='Failed'
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') 
								{
                                    sh "exit 1"
                                }
                            }
                        }
                    }        
                }
				stage('Application: core') {
                    when {
                        expression {
                        'core' in application||'All' in application
                        }
                    }
                    steps {
                        script{
                            try{
                                println "Performing "+ action +" on application core"
                                def serverdetails = readJSON file: 'core.json'
                                def nceServer = serverdetails.NCE_SERVERS
                                def ncwServer = serverdetails.NCW_SERVERS
								def homefolder = serverdetails.DIRECTORY
								
								def appServersFromParamArray = Arrays.asList((appServersFromParam).split(","))
								def server
                         
                                if(application =='All') {
									if(datacenter =='NCE'){
										server = nceServer
										println "nce servers are: " + server
									}
									else if(datacenter =='NCW'){
										server = ncwServer
										println "ncw servers are: " + server
									}
								}
								else 
								{	
									server = appServersFromParamArray
									println "server selected from job parameter: " + server
									println "api selected from job parameter: " + apiFromParameter
                                }
								//performing action if All is selected from Application dropdown
								if(action =='status' && application =='All'){
									
									startstopcore(homefolder, server,action)
									startstopelasticsearch(server,action)		
								}
								else if(action =='stop' && application =='All'){
									
									startstopcore(homefolder,server,action)
									startstopelasticsearch(server,action) 
									
								}
                                else if(action =='start' && application =='All'){
									startstopcore(homefolder,server,action)
									startstopelasticsearch(server,action) 
								}
								
								//performing action if core is selected from Application dropdown
								if(apiFromParameter =='core'){
									startstopcore(homefolder,server,action)
								
								}
								else if(apiFromParameter =='elasticsearch'){
									startstopelasticsearch(server,action) 
								}
							}catch(Exception e) 
                            {
                                println "******** ERROR ********"+e
                                core ='Failed'
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') 
								{
                                    sh "exit 1"
                                }
                            }
                        }
                    }        
                }				
			}   
		}        
    }
    /*post {
		always {
			sparkSend credentialsId: 'UnifiedBuyflowSparkBot', 
			message: " Job URL: ${env.JOB_URL} \n User: ${cause.userName} \n Application: [${Application}] \n Action: [${action}] \n DC: [${datacenter}] \n Build status: [${currentBuild.currentResult}] \n paymentedgeapi: [${paymentedgeapi}] \n core: [${core}] \n c3po:[${c3po}]",
			spaceList: [[spaceId: '21f9d0e0-92b5-11ee-a0f4-6d1d3af5a51f', 
			spaceName: 'MamtaKT']]  
		}

	}*/
}
def kafkaZookeepStartStop(String appName, Object server, String action){
	def counter =0
	for(s in server) {
		def SSH_OPTION="ssh -q jenkins_worker@${s} -o StrictHostKeyChecking=no"
		echo "$SSH_OPTION sudo service ${appName}-${counter} ${action}"
		//sh "$SSH_OPTION sudo service ${appName}-${counter} ${action}"
		counter = counter +1
	}
}
def appStartStop(String appName, Object server, String action){
	for(s in server) {
		def SSH_OPTION="ssh -q jenkins_worker@${s} -o StrictHostKeyChecking=no"
		echo "command $SSH_OPTION sudo su - oosuser  '/data/apps/${appName}/bin/app-${action}.sh'" 
		//sh "$SSH_OPTION sudo su - oosuser  '/data/apps/${appName}/bin/app-${action}.sh'"	
	}
}
def startstopelasticsearch(Object server,String action){
	for(s in server) {
		SSH_OPTION="ssh -q jenkins_worker@${s} -o StrictHostKeyChecking=no"
		echo "sudo systemctl ${action} elasticsearch.service"
		//sh "$SSH_OPTION sudo systemctl ${action} elasticsearch.service"
	}
}
def startstopcore(String home_folder, Object server,String action){
	for(s in server) {
		def SSH_OPTION="ssh -q jenkins_worker@${s} -o StrictHostKeyChecking=no"
		echo "$SSH_OPTION sudo su - core_user  '${home_folder}/bin/app-${action}.sh'" 
		//sh "$SSH_OPTION sudo su - core_user -c '$HOME_FOLDER/app-${action}.sh'"	
	}
}	
