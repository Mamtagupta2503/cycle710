def datacenter =params.DC
def action =params.Action
def application =params.Application
def apiFromParameter =params.api 
def appServersFromParam = params.server
def publishresults='' 
def cause = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')


pipeline {
    agent any
	//agent {label 'ncw'}

    stages {
        stage('Parallel execution') {
            parallel {
                stage('Application: payment-edge-api') {
                    when {
                        expression {
                        'payment-edge-api' in application||'All' in application
                        }
                    }
                    steps {
                        script{
                            //try{
                                println "Performing "+ action +" on application payment-edge-api"
                                def serverdetails = readJSON file: 'payment-edge-api.json'
								def nceServer = serverdetails.NCE_SERVERS
                                def ncwServer = serverdetails.NCW_SERVERS
								def nceAdminServer = serverdetails.ADMIN_NCE_SERVERS
                                def ncwAdminServer = serverdetails.ADMIN_NCW_SERVERS
								def appName = serverdetails.APP
								def reverseApp = appName.reverse(); // reversing the appname to use in the start sequence
								def appServersFromParamArray = Arrays.asList((appServersFromParam).split(","))
								def server
								def paramServer
								def adminServer
                         
                                if(application =='All') {
									if(datacenter =='NCE'){
										server = nceServer
										adminServer = nceAdminServer
										println "nce servers are: " + server
										println "nce adminServer : " + adminServer
										println "appName from bitbucket : " + appName
									}
									else if(datacenter =='NCW'){
										server = ncwServer
										adminServer = ncwAdminServer
										println "ncw servers are: " + server
										println "ncw adminServer : " + adminServer
										println "appName from bitbucket : " + appName
									}
									
									/*if(action =='status' || action =='stop'){
										for(app in appName) {
											appStartStop(app, server,action)
										}
										appStartStop('services-server-admin', adminServer,action)
										appStartStop('services-server-config', server,action)
										kafkaZookeepStartStop(application,'kafka',server,action)
										kafkaZookeepStartStop(application,'zookeeper',server,action)								
									}
									else if(action =='start'){
										kafkaZookeepStartStop(application,'zookeeper',server,action)
										kafkaZookeepStartStop(application,'kafka',server,action)
										appStartStop('services-server-config', server,action)
										appStartStop('services-server-admin', adminServer,action)
										for(app in reverseApp) {
											appStartStop(app, server,action)
										}
									}*/
									if(action =='status' || action =='stop'){
										for(app in appName) {
											if(!app.contains("services-server-admin") || !app.contains( "kafka") || !app.contains("zookeeper")){
												println " if1"
												appStartStop(app, server,action)
											}
											else if(app.contains("services-server-admin"){
												println "if2"
												appStartStop(app, adminServer,action)
											}
											else if(app.contains( "kafka" || app.contains("zookeeper"){
												println "if3"
												kafkaZookeepStartStop(application,app,server,action)
											}
										}
																		
									}
									else if(action =='start'){
										for(app in reverseApp) {
											if(app !='services-server-admin' || app != 'kafka' || app !='zookeeper')
												appStartStop(app, server,action)
											else if(app =='services-server-admin')
												appStartStop(app, adminServer,action)
											else if(app == 'kafka' || app =='zookeeper')
												kafkaZookeepStartStop(application,app,server,action)
										}
									}
									
								}

								else if(application =='payment-edge-api'){
									
									paramServer = appServersFromParamArray
									println "server selected from job parameter: " + paramServer
									
									if(apiFromParameter =='kafka' || apiFromParameter =='zookeeper'){
										println "-kafkaZookeepStartStop method--" + apiFromParameter
										kafkaZookeepStartStop(application, apiFromParameter, paramServer,action)
									}
									else {
										println "-appStartStop--" + apiFromParameter
										appStartStop(apiFromParameter, paramServer,action)
									}
                                }
								
								// to publish the output, apiFromParameter will be null if action is performed for ALL
								def result ='Success'
								publishresults = publishresults + "payment-edge-api: " + "" + apiFromParameter + " " +result+ "\n"

							/*}catch(Exception e) 
                            {
                                println "******** ERROR ********"+e
                                result ='Failed'
								publishresults = publishresults + "payment-edge-api: " + "" + apiFromParameter + " " +result+ "\n"
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') 
								{
                                    sh "exit 1"
                                }
                            }*/
                        }
                    }        
                }
				stage('Application: c3po') {
                    when {
                        expression {
                        'c3po' in application||'All' in application
                        }
                    }
                    steps {
                        script{
                            try{
                                println "Performing "+ action +" on application c3po"
                                def serverdetails = readJSON file: 'c3po.json'
								def GatewayNceServer = serverdetails.GATEWAY_NCE_SERVERS
                                def GatewayNcwServer = serverdetails.GATEWAY_NCW_SERVERS
								def c3poNceServer =serverdetails.C3PO_NCE_SERVERS
								def c3poNcwServer =serverdetails.C3PO_NCW_SERVERS
								def kznceServer= serverdetails.KAFKA_ZK_NCE_SERVERS
								def kzncwServer= serverdetails.KAFKA_ZK_NCW_SERVERS
								def nceAdminServer = serverdetails.ADMIN_NCE_SERVERS
                                def ncwAdminServer = serverdetails.ADMIN_NCW_SERVERS
								def nceConfigEurekaServer = serverdetails.CONFIG_EUREKA_NCE_SERVERS
								def ncwConfigEurekaServer = serverdetails.CONFIG_EUREKA_NCW_SERVERS				
								def appServersFromParamArray = Arrays.asList((appServersFromParam).split(","))
								
								def paramServer
								def adminServer
								def kzserver
								def configeurekaserver
								def gatewayServer
								def c3poServer
                         
                                if(application =='All') {
									if(datacenter =='NCE'){
										c3poServer = c3poNceServer
										gatewayServer = GatewayNceServer
										adminServer = nceAdminServer
										kzserver = kznceServer
										configeurekaserver =nceConfigEurekaServer
										println "nce c3po servers: " + c3poServer
										println "nce gateway servers: " + gatewayServer
										println "nce adminServer : " + adminServer
										println "nce kafka/zookeeper servers: " + kznceServer
										println "nce eureka config server : " + nceConfigEurekaServer
									}
									else if(datacenter =='NCW'){
										c3poServer = c3poNcwServer
										gatewayServer = GatewayNcwServer
										adminServer = ncwAdminServer
										kzserver =kzncwServer
										configeurekaserver=ncwConfigEurekaServer
										println "ncw c3po servers: " + c3poServer
										println "ncw gateway servers: " + gatewayServer
										println "ncw adminServer : " + adminServer
										println "ncw kafka/zookeeper servers: " + kzncwServer
										println "ncw eureka config server : " + ncwConfigEurekaServer
									}
									
									if(action =='status' || action =='stop'){
										appStartStop('c3po', c3poServer,action)
										appStartStop('services-server-gateway', gatewayServer,action)
										appStartStop('services-server-eureka', configeurekaserver,action)
										appStartStop('services-server-admin', adminServer,action)
										appStartStop('services-server-config', configeurekaserver,action)
										kafkaZookeepStartStop(application,'kafka',kzserver,action)
										kafkaZookeepStartStop(application,'zookeeper',kzserver,action)								
									}

									else if(action =='start'){
										kafkaZookeepStartStop(application,'zookeeper',kzserver,action)
										kafkaZookeepStartStop(application,'kafka',kzserver,action)
										appStartStop('services-server-config', configeurekaserver,action)
										appStartStop('services-server-admin', adminServer,action)
										appStartStop('services-server-eureka', configeurekaserver,action)
										appStartStop('services-server-gateway', gatewayServer,action)
										appStartStop('c3po', c3poServer,action)
									}
								}
								else if(application =='c3po'){
									paramServer = appServersFromParamArray
									println "server selected from job parameter: " + paramServer
									println "api selected from job parameter: " + apiFromParameter
									
									if(apiFromParameter =='kafka' || apiFromParameter =='zookeeper'){
										println "-kafkaZookeepStartStop method--" + apiFromParameter
										kafkaZookeepStartStop(application, apiFromParameter, paramServer,action)
									}
									else {
										println "-appStartStop--" + apiFromParameter
										appStartStop(apiFromParameter, paramServer,action)
									}
								}
								
								def result ='Success'
								publishresults = publishresults + "c3po: " + "" + apiFromParameter + " " +result+ "\n"
							}catch(Exception e) 
                            {
                                result ='Failed'
								publishresults = publishresults + "c3po: " + "" + apiFromParameter + " " +result+ "\n"
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') 
								{
                                    sh "exit 1"
                                }
                            }
                        }
                    }        
                }
				stage('Application: core') {
                    when {
                        expression {
                        'core' in application||'All' in application
                        }
                    }
                    steps {
                        script{
                            try{
                                println "Performing "+ action +" on application core"
                                def serverdetails = readJSON file: 'core.json'
                                def nceServer = serverdetails.NCE_SERVERS
                                def ncwServer = serverdetails.NCW_SERVERS
								def homefolder = serverdetails.DIRECTORY
								
								def appServersFromParamArray = Arrays.asList((appServersFromParam).split(","))
								def server
                         
                                if(application =='All') {
									if(datacenter =='NCE'){
										server = nceServer
										println "nce servers are: " + server
									}
									else if(datacenter =='NCW'){
										server = ncwServer
										println "ncw servers are: " + server
									}
								if(action =='status'||action =='stop'){
									
									startstopcore(homefolder,server,action)
									startstopelasticsearch(server,action) 
									}
                                else if(action =='start') {
									startstopelasticsearch(server,action) 
									startstopcore(homefolder,server,action)
									}
								}
								
								else if(application =='core') {	
									server = appServersFromParamArray
									println "server selected from job parameter: " + server
									println "api selected from job parameter: " + apiFromParameter
									
									if(apiFromParameter =='core'){
									startstopcore(homefolder,server,action)
					
									}
									else if(apiFromParameter =='elasticsearch'){
										startstopelasticsearch(server,action) 
									}
                                }
								def result ='Success'
								publishresults = publishresults + "core: " + "" + apiFromParameter + " " +result+ "\n"
							}catch(Exception e) 
                            {
								result ='Failed'
								publishresults = publishresults + "core: " + "" + apiFromParameter + " " +result+ "\n"
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') 
								{
                                    sh "exit 1"
                                }
                            }
                        }
                    }        
                }				
			}   
		}        
    }
    post {
		always {
			println publishresults
			/*sparkSend credentialsId: 'UnifiedBuyflowSparkBot', 
			message: " Job URL: ${env.JOB_URL} \n BUILD_NUMBER: ${env.BUILD_NUMBER} \n User: ${cause.userName} \n Application: [${Application}] \n Action: [${action}] \n DC: [${datacenter}] \n Build status: [${currentBuild.currentResult}] \n StageResult: [${publishresults}] ",
			spaceList: [[spaceId: 'e26bdaf0-e471-11ed-8020-692d324207aa', 
			spaceName: 'Jenkins Job Status - OPS']]*/
			}
	}
}
def kafkaZookeepStartStop(Object application, String appName, Object server, String action){
	if(application =='All') {
		def counter =0
		for(s in server) {
			def SSH_OPTION="ssh -o LogLevel=error jenkins_worker@${s} -o StrictHostKeyChecking=no"
			echo "$SSH_OPTION sudo service ${appName}-${counter} ${action}"
			//sh "$SSH_OPTION sudo service ${appName}-${counter} ${action}"
			counter = counter +1
		}
	}
	else if(application == 'c3po'){
		def c3poCounter
		for(s in server) {
			if(s =='22.240.0.210'||s== '22.242.0.159'){
				c3poCounter = 0
			}
			else if(s =='22.240.0.44'||s =='22.242.0.19'){
				c3poCounter = 1
			}
			else if(s=='22.240.0.29'||s == '22.242.0.24'){
				c3poCounter = 2
			}
			else if(s =='22.240.0.30'||s =='22.242.0.18'){
				c3poCounter = 3
			}
			else if (s =='22.240.0.27'||s =='22.242.0.14'){
				c3poCounter = 4
			}				
			def SSH_OPTION="ssh -o LogLevel=error jenkins_worker@${s} -o StrictHostKeyChecking=no"
			echo "$SSH_OPTION sudo service ${appName}-${c3poCounter} ${action}"
			//sh "$SSH_OPTION sudo service ${appName}-${c3poCounter} ${action}"
			
		}	
	}
	else if(application =='payment-edge-api'){
		def paymentEdgeApiCounter 
		for(s in server) {
			if(s == 'papi1-prod.nce.webapps.rr.com'||s == 'papi1-prod.ncw.webapps.rr.com'){
			paymentEdgeApiCounter = 0
			}
			else if(s =='papi3-prod.nce.webapps.rr.com'||s == 'papi3-prod.ncw.webapps.rr.com'){
			paymentEdgeApiCounter = 1
			}
			else if(s =='papi2-prod.nce.webapps.rr.com'||s == 'papi2-prod.ncw.webapps.rr.com'){
			paymentEdgeApiCounter = 2
			}
			def SSH_OPTION="ssh -o LogLevel=error jenkins_worker@${s} -o StrictHostKeyChecking=no"
			echo "$SSH_OPTION sudo service ${appName}-${paymentEdgeApiCounter} ${action}"
			//sh "$SSH_OPTION sudo service ${appName}-${paymentEdgeApiCounter} ${action}"
			
		}
	}
}
def appStartStop(String appName, Object server, String action){
	//def appStartStopresult =''
	def result =''
	for(s in server) {
		def SSH_OPTION="ssh -o LogLevel=error jenkins_worker@${s} -o StrictHostKeyChecking=no"
		echo "command $SSH_OPTION sudo su - oosuser  '/data/apps/${appName}/bin/app-${action}.sh'" 
		//sh "$SSH_OPTION sudo su - oosuser  '/data/apps/${appName}/bin/app-${action}.sh'"
		
	}
}
def startstopelasticsearch(Object server,String action){
	for(s in server) {
		SSH_OPTION="ssh -o LogLevel=error jenkins_worker@${s} -o StrictHostKeyChecking=no"
		echo "sudo systemctl ${action} elasticsearch.service"
		//sh "$SSH_OPTION sudo systemctl ${action} elasticsearch.service"
	}
}
def startstopcore(String home_folder, Object server,String action){
	for(s in server) {
		def SSH_OPTION="ssh -o LogLevel=error jenkins_worker@${s} -o StrictHostKeyChecking=no"
		echo "$SSH_OPTION sudo su - core_user  '${home_folder}/bin/app-${action}.sh'" 
		//sh "$SSH_OPTION sudo su - core_user '${home_folder}/bin/app-${action}.sh'"	
		
	}
}	
