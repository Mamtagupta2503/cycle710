def application =params.Application
def action =params.Action
def datacenter =params.DC
def paymentedgeapi ='Success'
def core ='Success'
def c3po ='Success'
def cause = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')

pipeline {
    agent any

    stages {

		stage('Parallel execution') {
			parallel {
				stage('server details'){
				steps {
						script{
							println "application" + application
							println "Action" + action
							println "datacenter" + datacenter
						}
					}	
				}
				stage('payment-edge-api') {
					when {
						expression {
						'payment-edge-api' in application||'ALL' in application
						}
					}
					steps {
						script{
							/*try { */
								println "Performing "+ action +" on application payment-edge-api"								
								//def serverdetails = readJSON file: 'Patching_cycle_07_10/payment-edge-api.json'
								def serverdetails = readJSON file: 'payment-edge-api.json'
								def haproxyservers = serverdetails.HAPROXY_SERVERS 
								def nceserver = serverdetails.NCE_SERVERS
								def ncwserver = serverdetails.NCW_SERVERS
								def backend = serverdetails.BACKEND
								def sockfileloc = serverdetails.SOCKFILE
								def server
								
			
								if(datacenter =='NCE'){
									 server = nceserver
									 println "NCE server are: " + server
								}
								else if(datacenter =='NCW'){
									server = ncwserver
									println "NCW server are: " + server
								}
								performaction(haproxyservers, backend, server, action, sockfileloc )			
							/*}catch(Exception e) {
								paymentedgeapi ='Failed'
								catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
								sh "exit 1"
								}
							} */
						}
					}      
				}
				stage('c3po') {
					when {
						expression {
						'c3po' in application||'ALL' in application
						}
					}
					steps {
						script{
							try {
								println "Performing "+ action +" on application c3po"								
								def serverdetails = readJSON file: 'Patching_cycle_07_10/c3po.json'
								def haproxyservers = serverdetails.HAPROXY_SERVERS 
								def nceserver = serverdetails.NCESERVERS
								def ncwserver = serverdetails.NCWSERVERS
								def ncebackend = serverdetails.NCEBACKEND
								def ncwbackend = serverdetails.NCWBACKEND
								def sockfileloc = serverdetails.SOCKFILE
								def server
								def backend

								if(datacenter =='NCE'){
									 server = nceserver
									 backend =ncebackend
									 println "NCE server are: " + server
									 println "NCE backend is: " + backend
								}
								else if(datacenter =='NCW'){
									server = ncwserver
									backend =ncwbackend
									println "NCW server are: " + server
									println "NCW backend is: " + backend
								}
								performaction(haproxyservers, backend, server, action, sockfileloc )				
							}catch(Exception e) {
								c3po ='Failed'
								catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
								sh "exit 1"
								}
							}
						}
					}      
				}
				stage('core') {
					when {
						expression {
						'core' in application||'ALL' in application
						}
					}
				steps {
					script{
						try {
							println "Performing "+ action +" on application core"	
							def serverdetails = readJSON file: 'Patching_cycle_07_10/core.json'
							def haproxyservers = serverdetails.HAPROXY_SERVERS 
							def nceserver = serverdetails.NCESERVERS
							def ncwserver = serverdetails.NCWSERVERS
							def backend = serverdetails.BACKEND
							def sockfileloc = serverdetails.SOCKFILE
							def server

							if(datacenter =='NCE'){
								server = nceserver
								println "NCE server are: " + server
							}
							else if(datacenter =='NCW'){
								server = ncwserver
								println "NCW server are: " + server
							}
						performaction(haproxyservers, backend, server, action, sockfileloc )	
						}catch(Exception e) {
							core ='Failed'
							catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
								sh "exit 1"
							}
						}
					}      
				}
			}     
			}
		} 
	}	 
}
def performaction(Object haproxyservers, Object backend, Object server, String action, Object sockfileloc ){
	for(ha in haproxyservers) {
		def SSH_OPTION="ssh jenkins_worker@${ha} -o StrictHostKeyChecking=no"
		for(bknd in backend) {
			for(s in server) {
				echo "$action server: ${s} on haproxy: ${ha} backend ${bknd}"
				try{
					//sh "$SSH_OPTION 'echo $action server $bknd/$s | sudo socat stdio $sockfileloc'"
				}catch(Exception e) {
					paymentedgeapi ='Failed'
					catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
						sh "exit 1"
					}
				}
			}
		}
	}
}
def testperformaction(Object haproxyservers){
	println haproxyservers

}

/*post {
	always {
		sparkSend credentialsId: 'UnifiedBuyflowSparkBot', 
		message: " Job URL: ${env.JOB_URL} \n User: ${cause.userName} \n Application: [${Application}] \n Action: [${action}] \n DC: [${datacenter}] \n Build status: [${currentBuild.currentResult}] \n payment-edge-api: [${payment-edge-api}] \n c3po: [${c3po}] \n core: [${core}] ",
		spaceList: [[spaceId: '21f9d0e0-92b5-11ee-a0f4-6d1d3af5a51f', 
		spaceName: 'MamtaKT']]  
	}
} */
