def application =params.Application
def action =params.Action
def datacenter =params.DC
def publishResults=''
def cause = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')

pipeline {
    agent any

    stages {

		stage('Parallel execution') {
			parallel {
				stage('Job parameters'){
				steps {
						script{
							println "application : " + application
							println "Action : " + action
							println "datacenter : " + datacenter
						}
					}	
				}
				stage('payment-edge-api') {
					when {
						expression {
						'payment-edge-api' in application||'ALL' in application
						}
					}
					steps {
						script{
							try {
								println "Performing "+ action +" on application payment-edge-api"								
								def serverDetails = readJSON file: 'Patching_cycle_07_10/data/payment-edge-api.json'
								//def serverDetails = readJSON file: 'payment-edge-api.json'
								def HAProxyServers = serverDetails.HAPROXY_SERVERS 
								def nceserver = serverDetails.HA_NCE_SERVERS
								def ncwserver = serverDetails.HA_NCW_SERVERS
								def backend = serverDetails.BACKEND
								def sockFileLoc = serverDetails.SOCKFILE
								def server
								
			
								if(datacenter =='NCE'){
									 server = nceserver
									 println "NCE server are: " + server
								}
								else if(datacenter =='NCW'){
									server = ncwserver
									println "NCW server are: " + server
								}
								def result =performAction(HAProxyServers, backend, server, action, sockFileLoc )
								
								publishResults = publishResults + "payment-edge-api: " + result+ "\n"
									
									
							}catch(Exception e) {
								result ='Failed'
								publishResults = publishResults + "payment-edge-api: " + result+ "\n"
								catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
								sh "exit 1"
								}
							}
						}
					}      
				}
				stage('c3po') {
					when {
						expression {
						'c3po' in application||'ALL' in application
						}
					}
					steps {
						script{
							try {
								println "Performing "+ action +" on application c3po"								
								//def serverDetails = readJSON file: 'c3po.json'
								def serverDetails = readJSON file: 'Patching_cycle_07_10/data/c3po.json'
								def HAProxyServers = serverDetails.HAPROXY_SERVERS 
								def nceserver = serverDetails.HA_NCE_SERVERS
								def ncwserver = serverDetails.HA_NCW_SERVERS
								def backend = serverDetails.BACKEND
								def sockFileLoc = serverDetails.SOCKFILE
								def server

								if(datacenter =='NCE'){
									 server = nceserver
									 println "NCE server are: " + server
								}
								else if(datacenter =='NCW'){
									server = ncwserver
									println "NCW server are: " + server
								}
								def result = performAction(HAProxyServers, backend, server, action, sockFileLoc )				
								publishResults = publishResults + "c3po: " + result+ "\n"
								
							}catch(Exception e) {
								result ='Failed'
								publishResults = publishResults + "c3po: " + result+ "\n"
								catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
								sh "exit 1"
								}
							}
						}
					}      
				}
				stage('core') {
					when {
						expression {
						'core' in application||'ALL' in application
						}
					}
				steps {
					script{
						try {
							println "Performing "+ action +" on application core"	
							//def serverDetails = readJSON file: 'core.json'
							def serverDetails = readJSON file: 'Patching_cycle_07_10/data/core.json'
							def HAProxyServers = serverDetails.HAPROXY_SERVERS 
							def nceserver = serverDetails.NCE_SERVERS
							def ncwserver = serverDetails.NCW_SERVERS
							def backend = serverDetails.BACKEND
							def sockFileLoc = serverDetails.SOCKFILE
							def server

							if(datacenter =='NCE'){
								server = nceserver
								println "NCE server are: " + server
							}
							else if(datacenter =='NCW'){
								server = ncwserver
								println "NCW server are: " + server
							}
							def result = performAction(HAProxyServers, backend, server, action, sockFileLoc )	
							publishResults = publishResults + "core: " + result+ "\n"
							
						}catch(Exception e) {
							result ='Failed'
							publishResults = publishResults + "core: " + result+ "\n"
							catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
								sh "exit 1"
							}
						}
					}      
				}
			}     
			}
		} 
	}
	/*post {
	always {
			println publishResults
		}
	}*/
    post {
	always {
		println publishResults
		/*sparkSend credentialsId: 'UnifiedBuyflowSparkBot', 
		message: " Job URL: ${env.JOB_URL} \n User: ${cause.userName} \n Application: [${Application}] \n Action: [${action}] \n DC: [${datacenter}] \n Build status: [${currentBuild.currentResult}] \n StageResult: [${publishResults}] ",
		spaceList: [[spaceId: '21f9d0e0-92b5-11ee-a0f4-6d1d3af5a51f', 
		spaceName: 'MamtaKT']]  */
	}
} 
	
}
def performAction(Object HAProxyServers, Object backend, Object server, String action, Object sockFileLoc ){
	def result ='Success'
	for(ha in HAProxyServers) {
		def SSH_OPTION="ssh jenkins_worker@${ha} -o StrictHostKeyChecking=no"
		for(bknd in backend) {
			for(s in server) {
				echo "$SSH_OPTION 'echo $action server $bknd/$s | sudo socat stdio $sockFileLoc'"
				try{
					//sh "$SSH_OPTION 'echo $action server $bknd/$s | sudo socat stdio $sockFileLoc'"
					
				}catch(Exception e) {
					result ='Failure'	
					catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
						sh "exit 1"
					}
				}
			}
		}
	}
	return result
}

