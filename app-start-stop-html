def datacenter =params.DC
def action =params.Action
def application =params.Application
def publishresults='' 
def cause = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')


pipeline {
    agent any
	//agent {label 'ncw'}

    stages {
        stage('Parallel execution') {
            parallel {
                stage('Application: payment-edge-api') {
                    when {
                        expression {
                        'payment-edge-api' in application||'All' in application
                        }
                    }
                    steps {
                        script{
                            //try{
                                println "Performing "+ action +" on application payment-edge-api"
                                def serverdetails = readJSON file: 'payment-edge-api.json'
								def nceServer = serverdetails.NCE_SERVERS
                                def ncwServer = serverdetails.NCW_SERVERS
								def nceAdminServer = serverdetails.ADMIN_NCE_SERVERS
                                def ncwAdminServer = serverdetails.ADMIN_NCW_SERVERS
								def appName = serverdetails.APP
								def reverseApp = appName.reverse(); // reversing the appname to use in the start sequence
								def server
								def adminServer
								def apiList
								def outputArray
                         
								if(application =='All') {
									if(datacenter =='NCE'){
										server = nceServer
										adminServer = nceAdminServer
										println "nce servers are: " + server
										println "nce adminServer : " + adminServer
										println "appName from bitbucket : " + appName
									}
									else if(datacenter =='NCW'){
										server = ncwServer
										adminServer = ncwAdminServer
										println "ncw servers are: " + server
										println "ncw adminServer : " + adminServer
										println "appName from bitbucket : " + appName
									}
									if(action =='status' || action =='stop'){
										apiList =appName
										println apiList
									}	
									else if(action =='start'){
										apiList =reverseApp
										println apiList
									}
									for(app in apiList) {
										if((!app.contains("kafka")) && (!app.contains("zookeeper"))&& (!app.contains("services-server-admin"))){
											println action + " on " + app
											outputArray =appStartStop(app, server,action)
											//println outputArray
											if(!outputArray.isEmpty()){
												for(oa in outputArray)
												{
													println oa +mamta
												}	
											}
										}
										else if(app.contains("services-server-admin")){
											println action + " on " + app
											outputArray =appStartStop(app, adminServer,action)
										}
										else if(app.contains("kafka") || app.contains("zookeeper")){
											println action + " on " + app
											outputArray =kafkaZookeepStartStop(application,app,server,action)
										}
									}
								}
								else if(application =='payment-edge-api'){
									
									println "--list--"+apiServerList 
									String[] listWithoutend
									listWithoutend =apiServerList.split("break,")
									println "---after split:--"+ listWithoutend
									HashMap<String, ArrayList> apiServerMap = new HashMap<>();
									
									for(ls in listWithoutend) {
										if(!ls.equals(""))
										{
											def apiData = ls.split(",");
											println "api with server-- "+apiData
											def api= apiData[0]
											ArrayList ServerList = new ArrayList();
											for(int i =1; i< apiData.size(); i++){
												ServerList.add(apiData[i])	
											}
											if((!api.contains("kafka")) && (!api.contains("zookeeper"))){
												if(!api.equals("")){
													outputArray =appStartStop(api, ServerList,action)
												}
												else 
												{
													println "api not selected from parameter"
												}	
												//println outputArray
												if(!outputArray.isEmpty()){
													for(oa in outputArray)
													{
														println "mamta"
													}	
												}
											}
											else if(api.contains("kafka") || api.contains("zookeeper")){
												println action + " on " + api
												if(!api.equals("")){
													outputArray =kafkaZookeepStartStop(application,api,ServerList,action)
												}
												else 
												{
													println "api not selected from parameter"
												}	
											}
											//apiServerMap.put(api,ServerList)
										}
									}
									
									
									/*
									server = appServersFromParamArray
									println "server selected from job parameter: " + server
									if(action =='status' || action =='stop'){
										apiList =apiFromParameterArray
										println apiList
									}	
									else if(action =='start'){
										apiList =apiFromParameterArray.reverse()
										println apiList
									}*/
                                }
								// action starts here
								
								
								// to publish the output, apiFromParameter will be null if action is performed for ALL
								//def result ='Success'
								//publishresults = publishresults + "payment-edge-api: " + "" + apiFromParameter + " " +result+ "\n"

							/*}catch(Exception e) 
                            {
                                println "******** ERROR ********"+e
                                result ='Failed'
								publishresults = publishresults + "payment-edge-api: " + "" + apiFromParameter + " " +result+ "\n"
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') 
								{
                                    sh "exit 1"
                                }
                            }*/
                        }
                    }        
                }				
			}   
		}        
    }
    post {
		always {
			println publishresults
			/*sparkSend credentialsId: 'UnifiedBuyflowSparkBot', 
			message: " Job URL: ${env.JOB_URL} \n BUILD_NUMBER: ${env.BUILD_NUMBER} \n User: ${cause.userName} \n Application: [${Application}] \n Action: [${action}] \n DC: [${datacenter}] \n Build status: [${currentBuild.currentResult}] \n StageResult: [${publishresults}] ",
			spaceList: [[spaceId: 'e26bdaf0-e471-11ed-8020-692d324207aa', 
			spaceName: 'Jenkins Job Status - OPS']]*/
			}
	}
}
def kafkaZookeepStartStop(Object application, String appName, Object server, String action){
	if(application =='All') {
		def counter =0
		for(s in server) {
			def SSH_OPTION="ssh -o LogLevel=error jenkins_worker@${s} -o StrictHostKeyChecking=no"
			echo "$SSH_OPTION sudo service ${appName}-${counter} ${action}"
			//sh "$SSH_OPTION sudo service ${appName}-${counter} ${action}"
			counter = counter +1
		}
	}
	else if(application == 'c3po'){
		def c3poCounter
		for(s in server) {
			if(s =='22.240.0.210'||s== '22.242.0.159'){
				c3poCounter = 0
			}
			else if(s =='22.240.0.44'||s =='22.242.0.19'){
				c3poCounter = 1
			}
			else if(s=='22.240.0.29'||s == '22.242.0.24'){
				c3poCounter = 2
			}
			else if(s =='22.240.0.30'||s =='22.242.0.18'){
				c3poCounter = 3
			}
			else if (s =='22.240.0.27'||s =='22.242.0.14'){
				c3poCounter = 4
			}				
			def SSH_OPTION="ssh -o LogLevel=error jenkins_worker@${s} -o StrictHostKeyChecking=no"
			echo "$SSH_OPTION sudo service ${appName}-${c3poCounter} ${action}"
			//sh "$SSH_OPTION sudo service ${appName}-${c3poCounter} ${action}"
			
		}	
	}
	else if(application =='payment-edge-api'){
		def paymentEdgeApiCounter 
		for(s in server) {
			if(s == 'papi1-prod.nce.webapps.rr.com'||s == 'papi1-prod.ncw.webapps.rr.com'){
			paymentEdgeApiCounter = 0
			}
			else if(s =='papi3-prod.nce.webapps.rr.com'||s == 'papi3-prod.ncw.webapps.rr.com'){
			paymentEdgeApiCounter = 1
			}
			else if(s =='papi2-prod.nce.webapps.rr.com'||s == 'papi2-prod.ncw.webapps.rr.com'){
			paymentEdgeApiCounter = 2
			}
			def SSH_OPTION="ssh -o LogLevel=error jenkins_worker@${s} -o StrictHostKeyChecking=no"
			echo "$SSH_OPTION sudo service ${appName}-${paymentEdgeApiCounter} ${action}"
			//sh "$SSH_OPTION sudo service ${appName}-${paymentEdgeApiCounter} ${action}"
			
		}
	}
}
def appStartStop(String appName, Object server, String action){
	//def appStartStopresult =''
	def result =''
	ArrayList failedArray = new ArrayList();
	for(s in server) {
		def SSH_OPTION="ssh -o LogLevel=error jenkins_worker@${s} -o StrictHostKeyChecking=no"
		try{
			println "$SSH_OPTION sudo su - oosuser  '/data/apps/${appName}/bin/app-${action}.sh'"
			result ='Success'
	
		}catch(Exception e) {
			result ='Failure'
			failedArray.add("$SSH_OPTION sudo su - oosuser  '/data/apps/${appName}/bin/app-${action}.sh'")			
			catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
				sh "exit 1"
			}
		}	
	}
	return failedArray
}
def startstopelasticsearch(Object server,String action){
	for(s in server) {
		SSH_OPTION="ssh -o LogLevel=error jenkins_worker@${s} -o StrictHostKeyChecking=no"
		echo "sudo systemctl ${action} elasticsearch.service"
		//sh "$SSH_OPTION sudo systemctl ${action} elasticsearch.service"
	}
}
def startstopcore(String home_folder, Object server,String action){
	for(s in server) {
		def SSH_OPTION="ssh -o LogLevel=error jenkins_worker@${s} -o StrictHostKeyChecking=no"
		echo "$SSH_OPTION sudo su - core_user  '${home_folder}/bin/app-${action}.sh'" 
		//sh "$SSH_OPTION sudo su - core_user '${home_folder}/bin/app-${action}.sh'"	
		
	}
}	
